
 2.1.5 	For each of the two conditions in the inner for loop in insertion sort (Algorithm
		2.2), describe an array of N items where that condition is always false when the
		loop terminates.
		
		For condition (j>0), a reverse ordered array will do it.
		For condition less(a[j], a[j-1]), an ordered array will do it.

 2.1.6  Which method runs faster for an array with all keys identical, selection sort or
		insertion sort?
		
		Insertion sort will run faster than Selection sort for an array with all keys identical.
		
		For Insertion sort:
		 * the total number of compares should be N-1.
		 * the total number of exchanges should be 0
		 * the total cost should be N-1
		 
		For Selection sort:
		 * the total number of compares should be 
		 	(N-1)+(N-2)+...+2+1 = (N-1+1)(N-1)/2 = N(N-1)/2
		 * the total number of exchanges should be
		 	N-1
		 * the total cost should be  N(N-1)/2 + N-1
		 
 2.1.7 	Which method runs faster for an array in reverse order, selection sort or insertion
		sort?
		
		For Insertion sort:
		 * the total number of compares should be
		 	1+2+...+(N-1) = N(N-1)/2
		 * the total number of exchanges should be
		  	1+2+...+(N-1) = N(N-1)/2
		 * the total cost should be N(N-1)/2 + N(N-1)/2 = N(N-1)
		 
		 For Selection sort:
		 * the total number of compares should be 
		 	(N-1)+(N-2)+...+2+1 = (N-1+1)(N-1)/2 = N(N-1)/2
		 * the total number of exchanges should be
		 	N-1
		 * the total cost should be  N(N-1)/2 + N-1 = (N-1)(N/2+1)
		 
		 Obviously N(N-1) > (N-1)(N/2+1), so Insertion sort is running slower than Selection sort
		 in this case.
		 
2.1.8 	Suppose that we use insertion sort on a randomly ordered array where elements
		have only one of three values. Is the running time linear, quadratic, or something in
		between?
		
		The worst scenario of this randomly ordered 3 values array is as follows:
		321 321 321 ... 321
		For group 1, the number of exchanges is 1+2
		For group 2, the number of exchanges is 2+4
		..
		For group N/3, the number of exchanges is 3+(N/3-1)*3=N
		
		*	This is an arithmetic sequence, the sum of this sequence is:
			3*N/3 + N/6*(N/3-1)*3 = N + N/2 * (N/3-1) = N^2/6 + N/2
		*	The number of compares is similar to number of compares
		
		Result:  The running time of this scenario is quadratic

2.1.9 	Show, in the style of the example trace with Algorithm 2.3, how shellsort sorts
		the array E A S Y S H E L L S O R T Q U E S T I O N.
		
		input:		E A S Y  S H E L  L S O R  T Q U E  S T I O  N
		13-sort:	E A E S  S H E L  L S O R  T Q U S  Y T I O  N
		4-sort:		E A E L  L H E R  S Q O S  T S I O  N T U S  Y
		1-sort:		A E E E H I L L N O O Q R S S S S T T U Y

2.1.10	Why not use selection sort for h-sorting in shellsort?

2.1.11	Implement a version of shellsort that keeps the increment sequence in an array,
		rather than computing it.

2.1.12 	Instrument shellsort to print the number of compares divided by the array size
		for each increment. Write a test client that tests the hypothesis that this number is a
		small constant, by sorting arrays of random Double values, using array sizes that are
		increasing powers of 10, starting at 100.
		
		
		
		